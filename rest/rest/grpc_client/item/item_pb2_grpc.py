# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import item_pb2 as item__pb2


class ItemServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.list = channel.unary_unary(
                '/item.ItemService/list',
                request_serializer=item__pb2.ItemListRequest.SerializeToString,
                response_deserializer=item__pb2.ItemListResponse.FromString,
                )
        self.detail = channel.unary_unary(
                '/item.ItemService/detail',
                request_serializer=item__pb2.ItemDetailRequest.SerializeToString,
                response_deserializer=item__pb2.ItemDetailResponse.FromString,
                )
        self.create = channel.unary_unary(
                '/item.ItemService/create',
                request_serializer=item__pb2.ItemCreateRequest.SerializeToString,
                response_deserializer=item__pb2.ItemCreateResponse.FromString,
                )
        self.update = channel.unary_unary(
                '/item.ItemService/update',
                request_serializer=item__pb2.ItemUpdateRequest.SerializeToString,
                response_deserializer=item__pb2.ItemUpdateResponse.FromString,
                )
        self.delete = channel.unary_unary(
                '/item.ItemService/delete',
                request_serializer=item__pb2.ItemDeleteRequest.SerializeToString,
                response_deserializer=item__pb2.ItemDeleteResponse.FromString,
                )


class ItemServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def list(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def detail(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ItemServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'list': grpc.unary_unary_rpc_method_handler(
                    servicer.list,
                    request_deserializer=item__pb2.ItemListRequest.FromString,
                    response_serializer=item__pb2.ItemListResponse.SerializeToString,
            ),
            'detail': grpc.unary_unary_rpc_method_handler(
                    servicer.detail,
                    request_deserializer=item__pb2.ItemDetailRequest.FromString,
                    response_serializer=item__pb2.ItemDetailResponse.SerializeToString,
            ),
            'create': grpc.unary_unary_rpc_method_handler(
                    servicer.create,
                    request_deserializer=item__pb2.ItemCreateRequest.FromString,
                    response_serializer=item__pb2.ItemCreateResponse.SerializeToString,
            ),
            'update': grpc.unary_unary_rpc_method_handler(
                    servicer.update,
                    request_deserializer=item__pb2.ItemUpdateRequest.FromString,
                    response_serializer=item__pb2.ItemUpdateResponse.SerializeToString,
            ),
            'delete': grpc.unary_unary_rpc_method_handler(
                    servicer.delete,
                    request_deserializer=item__pb2.ItemDeleteRequest.FromString,
                    response_serializer=item__pb2.ItemDeleteResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'item.ItemService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ItemService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def list(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/item.ItemService/list',
            item__pb2.ItemListRequest.SerializeToString,
            item__pb2.ItemListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def detail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/item.ItemService/detail',
            item__pb2.ItemDetailRequest.SerializeToString,
            item__pb2.ItemDetailResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/item.ItemService/create',
            item__pb2.ItemCreateRequest.SerializeToString,
            item__pb2.ItemCreateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/item.ItemService/update',
            item__pb2.ItemUpdateRequest.SerializeToString,
            item__pb2.ItemUpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/item.ItemService/delete',
            item__pb2.ItemDeleteRequest.SerializeToString,
            item__pb2.ItemDeleteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
