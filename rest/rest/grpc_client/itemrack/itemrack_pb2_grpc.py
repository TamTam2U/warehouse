# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import rest.grpc_client.itemrack.itemrack_pb2 as itemrack__pb2


class ItemRackServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.list = channel.unary_unary(
                '/itemrack.ItemRackService/list',
                request_serializer=itemrack__pb2.ItemRackListRequest.SerializeToString,
                response_deserializer=itemrack__pb2.ItemRackListResponse.FromString,
                )
        self.get = channel.unary_unary(
                '/itemrack.ItemRackService/get',
                request_serializer=itemrack__pb2.ItemRackDetailRequest.SerializeToString,
                response_deserializer=itemrack__pb2.ItemRackDetailResponse.FromString,
                )
        self.create = channel.unary_unary(
                '/itemrack.ItemRackService/create',
                request_serializer=itemrack__pb2.ItemRackCreateRequest.SerializeToString,
                response_deserializer=itemrack__pb2.ItemRackCreateResponse.FromString,
                )
        self.update = channel.unary_unary(
                '/itemrack.ItemRackService/update',
                request_serializer=itemrack__pb2.ItemRackUpdateRequest.SerializeToString,
                response_deserializer=itemrack__pb2.ItemRackUpdateResponse.FromString,
                )
        self.delete = channel.unary_unary(
                '/itemrack.ItemRackService/delete',
                request_serializer=itemrack__pb2.ItemRackDeleteRequest.SerializeToString,
                response_deserializer=itemrack__pb2.ItemRackDeleteResponse.FromString,
                )
        self.itemByRackId = channel.unary_unary(
                '/itemrack.ItemRackService/itemByRackId',
                request_serializer=itemrack__pb2.ItemByRackIdRequest.SerializeToString,
                response_deserializer=itemrack__pb2.ItemByRackIdResponse.FromString,
                )


class ItemRackServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def list(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def itemByRackId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ItemRackServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'list': grpc.unary_unary_rpc_method_handler(
                    servicer.list,
                    request_deserializer=itemrack__pb2.ItemRackListRequest.FromString,
                    response_serializer=itemrack__pb2.ItemRackListResponse.SerializeToString,
            ),
            'get': grpc.unary_unary_rpc_method_handler(
                    servicer.get,
                    request_deserializer=itemrack__pb2.ItemRackDetailRequest.FromString,
                    response_serializer=itemrack__pb2.ItemRackDetailResponse.SerializeToString,
            ),
            'create': grpc.unary_unary_rpc_method_handler(
                    servicer.create,
                    request_deserializer=itemrack__pb2.ItemRackCreateRequest.FromString,
                    response_serializer=itemrack__pb2.ItemRackCreateResponse.SerializeToString,
            ),
            'update': grpc.unary_unary_rpc_method_handler(
                    servicer.update,
                    request_deserializer=itemrack__pb2.ItemRackUpdateRequest.FromString,
                    response_serializer=itemrack__pb2.ItemRackUpdateResponse.SerializeToString,
            ),
            'delete': grpc.unary_unary_rpc_method_handler(
                    servicer.delete,
                    request_deserializer=itemrack__pb2.ItemRackDeleteRequest.FromString,
                    response_serializer=itemrack__pb2.ItemRackDeleteResponse.SerializeToString,
            ),
            'itemByRackId': grpc.unary_unary_rpc_method_handler(
                    servicer.itemByRackId,
                    request_deserializer=itemrack__pb2.ItemByRackIdRequest.FromString,
                    response_serializer=itemrack__pb2.ItemByRackIdResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'itemrack.ItemRackService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ItemRackService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def list(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/itemrack.ItemRackService/list',
            itemrack__pb2.ItemRackListRequest.SerializeToString,
            itemrack__pb2.ItemRackListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/itemrack.ItemRackService/get',
            itemrack__pb2.ItemRackDetailRequest.SerializeToString,
            itemrack__pb2.ItemRackDetailResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/itemrack.ItemRackService/create',
            itemrack__pb2.ItemRackCreateRequest.SerializeToString,
            itemrack__pb2.ItemRackCreateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/itemrack.ItemRackService/update',
            itemrack__pb2.ItemRackUpdateRequest.SerializeToString,
            itemrack__pb2.ItemRackUpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/itemrack.ItemRackService/delete',
            itemrack__pb2.ItemRackDeleteRequest.SerializeToString,
            itemrack__pb2.ItemRackDeleteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def itemByRackId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/itemrack.ItemRackService/itemByRackId',
            itemrack__pb2.ItemByRackIdRequest.SerializeToString,
            itemrack__pb2.ItemByRackIdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
